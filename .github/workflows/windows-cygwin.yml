name: Windows (Cygwin) build

on:
  push:
    branches: [ "**" ]      # run on any branch; tighten if you want
  pull_request:
  workflow_dispatch:         # allow manual runs from Actions tab

jobs:
  build-cygwin:
    runs-on: windows-latest

    steps:
      - name: Normalize line endings
        run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Cygwin with required packages
        uses: cygwin/cygwin-install-action@master
        with:
          packages: >
            autoconf automake libtool make gcc-core pkg-config autoconf-archive
            libglib2.0-devel libcurl-devel libsqlite3-devel libreadline-devel
            libncursesw-devel libstrophe-devel libssl-devel libexpat-devel zlib-devel

      - name: Debug paths
        shell: C:\cygwin\bin\bash.exe -o igncr {0}
        run: |
          set -x
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          cygpath -u "$GITHUB_WORKSPACE"
          ls -la "$(cygpath -u "$GITHUB_WORKSPACE")"
          uname -a
          bash --version
          autoconf --version
          automake --version
          pkg-config --version || true

      # Build in the repo root (no --login so we don't cd to $HOME)
      - name: Build (autoreconf, configure, make)
        shell: C:\cygwin\bin\bash.exe -o igncr {0}
        working-directory: ${{ github.workspace }}
        run: |
          set -euxo pipefail
          autoreconf -fi
          ./configure
          make -j

      # Optional: run unit tests if the project provides them
      # - name: Test
      #   shell: C:\cygwin\bin\bash.exe -o igncr {0}
      #   working-directory: ${{ github.workspace }}
      #   run: |
      #     set -euxo pipefail
      #     make check || true

      # Optional: show built binary info
      - name: Show binary/version
        shell: C:\cygwin\bin\bash.exe -o igncr {0}
        working-directory: ${{ github.workspace }}
        run: |
          set -euxo pipefail
          if [ -f .libs/profanity.exe ]; then
            ./.libs/profanity.exe --version || true
          elif [ -f profanity.exe ]; then
            ./profanity.exe --version || true
          fi
